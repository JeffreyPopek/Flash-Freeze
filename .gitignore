## Lines in this file starting with a '#' are comments
## Some elements are commented out, you may wish to uncomment
## these lines to tell git to ignore them by default
## Information for this file cobbled together from:
## https://github.com/github/gitignore/blob/master/Unity.gitignore
## https://github.com/github/gitignore/blob/master/Global/macOS.gitignore
## And other sources, such as:
## https://docs.unity3d.com/Manual/ExternalVersionControlSystemSupport.html

## This .gitignore file should be placed at the root of your git repository.
## Alternatively, you could place it at the root of your Unity Project.
## By placing it at the root of your git repository, all projects in that tree should be covered: 
## fa21-egd101-00-teamAwesome/
## ├── .git
## ├── .gitignore
## ├── .gitconfig
## ├── .gitattributes ## visible if you are using GitLFS
## ├── AwesomeGame/
## │   ├── Assembly-CSharp.csproj
## │   ├── Assets
## │   ├── Assets.meta
## │   ├── Scenes
## │   ├── Scenes.meta
## │   ├── Scripts
## │   ├── Scripts.meta
## │   ├── Sounds
## │   ├── Sounds.meta
## │   ├── Sprites
## │   └── Sprites.meta

[Ll]ibrary/
[Tt]emp/
[Oo]bj/
[Bb]uild/
[Bb]uilds/
[Ll]ogs/
[Uu]ser[Ss]ettings/

# MemoryCaptures can get excessive in size.
# They also could contain extremely sensitive data
[Mm]emoryCaptures/

# Asset meta data should only be ignored when the corresponding asset is also ignored
![Aa]ssets/**/*.meta

# Uncomment this line if you wish to ignore the asset store tools plugin
[Aa]ssets/AssetStoreTools*

# Autogenerated Jetbrains Rider plugin
[Aa]ssets/Plugins/Editor/JetBrains*

# Visual Studio cache directory
.vs/

# Visual Studio Code cache directory
.vscode/

# Gradle cache directory
.gradle/

# Autogenerated VS/MD/Consulo solution and project files
ExportedObj/
.consulo/
*.csproj
*.unityproj
*.sln
*.suo
*.tmp
*.user
*.userprefs
*.pidb
*.booproj
*.svd
*.pdb
*.mdb
*.opendb
*.VC.db

# Unity3D generated meta files
*.pidb.meta
*.pdb.meta
*.mdb.meta

# Unity3D generated file on crash reports
sysinfo.txt

# NO BUILDS ALLOWED IN GIT!!!
*.apk
*.aab
*.unitypackage
*.exe
*.dll
*.x86_64
*.debug
*.so
*_[Dd]ata/
[Mm]onoBleedingEdge/

# Crashlytics generated file
crashlytics-build.properties

# Packed Addressables
[Aa]ssets/[Aa]ddressable[Aa]ssets[Dd]ata/*/*.bin*

# Temporary auto-generated Android Assets
[Aa]ssets/[Ss]treamingAssets/aa.meta
[Aa]ssets/[Ss]treamingAssets/aa/*

## macOS specials
._*
*.Trashes
*.DS_Store
.AppleDouble
.LSOverride

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# GNU/Linux specials
.directory
This Unity project is now set up for External Version Control and your initial add, commit, and push! Yay!

Initial add, commit and push
After having set-up your Unity project for use with External Version Control as noted above. You will now want to make your initial add, commit, and push. Here's how from the command-line interface:

Open a terminal window to use command-line git
(Windows) Open git bash by clicking on the Windows Menu in the Task Bar, and typing bash
(macOS) Open Terminal.app (You will need to install Xcode Tools as prompted by macOS).
(GNU/Linux) Open your favorite Terminal (Konsole, Terminal, xterm, etc)
Navigate to the root of your new Unity Project: Type cd /c/Users/$USERNAME/Source/Repos/$GIT_REPO_NAME/$MYPROJECTNAME Note that when you do this, the prompt will likely change, to show your current branch (master) at the end of the prompt line, like this:
firstname.lastname@hostname MINGW64 /c/Users/$USERNAME/Source/Repos/$GIT_REPO_NAME/$MYPROJECTNAME (master)
Type git status to confirm that you are in the right place. You should see a listing of folders similar to this:
firstname.lastname@hostname MINGW64 /c/Users/$USERNAME/Source/Repos/$GIT_REPO_NAME/$MYPROJECTNAME (master)
$ ls -a1
./
../
.vs/
Assets/
Library/
ProjectSettings/
Temp/
UnityPackageManager/
$MYPROJECTNAME.csproj
$MYPROJECTNAME.sln